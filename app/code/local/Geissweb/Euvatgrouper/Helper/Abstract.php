<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL:
 * http://www.geissweb.de/eula/
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @category    Mage
 * @package     Geissweb_Euvatgrouper
 * @copyright   Copyright (c) 2011 GEISS WeblÃ¶sungen (http://www.geissweb.de)
 * @license     http://www.geissweb.de/eula/ GEISSWEB End User License Agreement
 */
class Geissweb_Euvatgrouper_Helper_Abstract extends Mage_Core_Helper_Abstract
{
	var $_debug = false;

	public function __construct()
	{
		$this->_debug = $this->isDebugMode();
	}

	/**
	 * Returns whether debug mode is turned on
	 * @return bool
	 */
	public function isDebugMode()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/extension_info/debug_mode', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets a list of all current EU member states
	 * @return array
	 */
	public function getEuCountries()
	{
		return explode(",", Mage::getStoreConfig('general/country/eu_countries'));
	}

    /**
     * @return array
     */
    public function getEuCountriesOptionArray()
    {
        return Mage::getResourceModel('directory/country_collection')
            ->addCountryCodeFilter($this->getEuCountries(), 'iso2')
            ->loadData()
            ->toOptionArray(false);
    }

	/**
	 * Gets the CC from system config
	 * @return string
	 */
	public function getMerchantCountryId()
	{
		if(Mage::getStoreConfig('general/store_information/merchant_country') != '')
		{
			return strtoupper(Mage::getStoreConfig('general/store_information/merchant_country'));
		} else {
			return $this->getStoreCountryCode();
		}
	}

	/**
	 * Gets the groups which shall be excluded from group assignment feature
	 * @return array
	 */
	public function getExcludedGroups()
	{
		return explode(",", Mage::getStoreConfig('euvatgrouper/group_assignment/excluded_groups', Mage::app()->getStore()->getId()));
	}

	/**
	 * Gets the groups which shall be excluded from Euvatgrouper tax calculation
	 * @return array
	 */
	public function getExcludedTaxGroups()
	{
		return explode(",", Mage::getStoreConfig('euvatgrouper/vat_settings/excluded_groups_taxcalc', Mage::app()->getStore()->getId()));
	}

	/**
	 * Gets the group ID
	 * @return int
	 */
	public function getValidEuVatGroupId()
	{
		return (int)Mage::getStoreConfig('euvatgrouper/group_assignment/target_group', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the group ID
	 * @return int
	 */
	public function getSameCountryGroupId()
	{
		return (int)Mage::getStoreConfig('euvatgrouper/group_assignment/target_group_same_cc', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the group ID
	 * @return int
	 */
	public function getOutsideEuGroupId()
	{
		return (int)Mage::getStoreConfig('euvatgrouper/group_assignment/target_group_outside', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the group ID
	 * @return int
	 */
	public function getDefaultGroupId()
	{
		return (int)Mage::getStoreConfig('customer/create_account/default_group', Mage::app()->getStore()->getId());
	}

    /**
     * Gets the group ID
     * @return int
     */
    public function getInvalidGroupId()
    {
       return (int)Mage::getStoreConfig('euvatgrouper/group_assignment/target_group_invalid', Mage::app()->getStore()->getId());
    }

    /**
     * Gets the group ID
     * @return int
     */
    public function getErrorGroupId()
    {
        return (int)Mage::getStoreConfig('euvatgrouper/group_assignment/target_group_errors', Mage::app()->getStore()->getId());
    }


	/**
	 * Gets the tax class ID for a given group ID
	 *
	 * @param $group_id
	 * @return int
	 */
	public function getTaxClassIdForGroup($group_id)
	{
		return (int)Mage::getSingleton('customer/group')->load($group_id)->getTaxClassId();
	}

	/**
	 * Gets the tax class ID for VAT exempt customers
	 * @return int
	 */
	public function getTaxExemptClassId() {
		return (int)Mage::getStoreConfig('euvatgrouper/vat_settings/tax_class_excluding', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the tax class ID for VAT customers
	 * @return int
	 */
	public function getTaxIncludingClassId() {
		return (int)Mage::getStoreConfig('euvatgrouper/vat_settings/tax_class_including', Mage::app()->getStore()->getId());
	}

    /**
     * Gets the tax class ID for VAT customers
     * @return int
     */
    public function getTaxIncludingClassIdBusiness() {
        return (int)Mage::getStoreConfig('euvatgrouper/vat_settings/tax_class_including_business', Mage::app()->getStore()->getId());
    }

	/**
	 * Gets the default country from Store Config
	 * @return bool
	 */
	public function getOfflineValidate()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/offline_validation', Mage::app()->getStore()->getId());
	}

	/**
	 * @return bool
	 */
	public function isModifyOrderGroup()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/group_assignment/modify_order_group', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the default country from Store Config
	 * @return bool
	 */
	public function getAccountingFix()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/group_assignment/force_general_on_vat', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the default country from Store Config
	 * @return bool
	 */
	public function getStoreCountryCode()
	{
		return Mage::getStoreConfig('general/country/default', Mage::app()->getStore()->getId());
	}

	/**
	 * Determines if the validation of VAT-IDs is enabled
	 * @return int
	 */
	public function isModuleActive()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/validate_vatid', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the full store VAT-ID
	 * @return int
	 */
	public function getShopVatId()
	{
		return Mage::getStoreConfig('euvatgrouper/vat_settings/own_vatid', Mage::app()->getStore()->getId());
	}

    /**
     * Gets the CC from VAT-ID
     * @return string
     */
    public function getShopVatCc()
    {
        return strtoupper(substr(Mage::getStoreConfig('euvatgrouper/vat_settings/own_vatid', Mage::app()->getStore()->getId()), 0, 2));
    }

	/**
	 * Gets the mail sender address
	 * @return int
	 */
	public function doSendValidationMail()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/email_settings/send_mail', Mage::app()->getStore()->getId());
	}


	/**
	 * Gets the mail sender address
	 * @return int
	 */
	public function getMailSender()
	{
		return Mage::getStoreConfig('euvatgrouper/email_settings/mail_sender', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the mail recipient address
	 * @return int
	 */
	public function getMailRecipient()
	{
		return Mage::getStoreConfig('euvatgrouper/email_settings/mail_recipient', Mage::app()->getStore()->getId());
	}

	/**
	 * Gets the mail template
	 * @return int
	 */
	public function getMailTemplate()
	{
		return Mage::getStoreConfig('euvatgrouper/email_settings/mail_template', Mage::app()->getStore()->getId());
	}

	/**
	 * Returns whether debug mode is turned on
	 * @return bool
	 */
	public function isIPv6Mode()
	{
		return Mage::getStoreConfig('euvatgrouper/extension_info/ipv6_mode', Mage::app()->getStore()->getId());
	}
	/**
	 * Returns the IPv4 address to bind on
	 * @return bool
	 */
	public function getIPv4ToBindOn()
	{
		return Mage::getStoreConfig('euvatgrouper/extension_info/ipv4_addr', Mage::app()->getStore()->getId());
	}

	/**
	 * Should Cross-Border-Trade be disabled for EU B2B customers
	 * @return int
	 */
	public function getDisableCbtForEuBusiness()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/disable_cbt_eub2b', Mage::app()->getStore()->getId());
	}

	/**
	 * Should Cross-Border-Trade be disabled for customers from out of Europe
	 * @return int
	 */
	public function getDisableCbtForOutOfEurope()
	{
		return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/disable_cbt_noneu', Mage::app()->getStore()->getId());
	}

    /**
     * Check if a valid VAT number is required to checkout
     * @return bool
     */
    public function getIsVatNumberRequired()
    {
        return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/require_valid_number_to_checkout', Mage::app()->getStore()->getId());
    }

	/**
	 * @param $cc : 2-letter country code
	 * @return bool
	 */
	public function isEuCountry($cc)
	{
		if (in_array($cc, $this->getEuCountries()))
			return true;
		return false;
	}

	/**
	 * Checks if the current scope is adminhtml
	 * @return bool
	 */
	public function isAdmin()
	{
		if(Mage::app()->getStore()->isAdmin())
			return true;

		if(Mage::getDesign()->getArea() == 'adminhtml')
			return true;

		return false;
	}

	/**
	 * @param null $vatid
	 *
	 * @return bool|null|string
	 */
	public function cleanCustomerVatId($vatid=NULL)
	{
		if($vatid != NULL)
		{
			$vatid = trim(str_replace(array(" ", ".", ",", "-", "|", "/"), "", $vatid));
			return $vatid;
		}

		return false;
	}

	/**
	 * Return country code of a VAT number
	 * @param $vatId
	 * @return string
	 */
	public function getVatIdCc($vatId)
	{
        $vatId = substr($vatId, 0, 2);

        switch($vatId) {
            case 'EL':
                $vatId = 'GR';
                break;
            default:
                break;
        }


		return strtoupper($vatId);
	}

	/**
	 * Get Tax based on setting
	 * @return mixed (billing|shipping|origin)
	 */
	public function getVatBasedOn()
	{
		return Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_BASED_ON, Mage::app()->getStore()->getId());
	}

    public function getIsTakeoverVatToAccount()
    {
        return (bool)Mage::getStoreConfig('euvatgrouper/vat_settings/takeover_vat_to_account', Mage::app()->getStore()->getId());
    }


    public function getLicenseStatus()
    {
        $key = Mage::getStoreConfig('euvatgrouper/extension_info/license_key', Mage::app()->getStore()->getId());
        if($key=='')
            return false;

        return true;
    }

    public function getPersonNLGroupId()
    {
        return '1';
    }

    public function getBusinessNLGroupId()
    {
        return '2';
    }

    public function getPersonEUGroupId()
    {
        return '17';
    }

    public function getBusinessEUGroupId()
    {
        return '3';
    }
}

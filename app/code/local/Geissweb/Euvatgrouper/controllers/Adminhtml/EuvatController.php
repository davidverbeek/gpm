<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL:
 * http://www.geissweb.de/eula/
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @category    Mage
 * @package     Geissweb_Euvatgrouper
 * @copyright   Copyright (c) 2011 GEISS WeblÃ¶sungen (http://www.geissweb.de)
 * @license     http://www.geissweb.de/eula/ GEISSWEB End User License Agreement
 */

class Geissweb_Euvatgrouper_Adminhtml_EuvatController extends Mage_Adminhtml_Controller_Action
{

	/**
	 * Mass validate customers VAT numbers in "taxvat" field
	 */
	public function validateAccountAction()
	{
		$customerIds = $this->getRequest()->getParam('customer');
		$validated = 0;

		if(!is_array($customerIds))
		{
			Mage::getSingleton('adminhtml/session')->addError(Mage::helper('euvatgrouper')->__('VAT validation was cancelled.'));

		} else {

			try {
				$validator = Mage::getSingleton('euvatgrouper/validation_vies');

					foreach($customerIds as $customerId)
					{
						$customer = Mage::getModel('customer/customer')->load($customerId);
						if($customer->getTaxvat() != "" && is_object($customer->getDefaultBillingAddress()))
						{
							$vat_nr = Mage::helper('euvatgrouper')->cleanCustomerVatId($customer->getTaxvat());
							$old_group_id = $customer->getGroupId();
							$old_group_name = Mage::getModel('customer/group')->load($customer->getGroupId())->getCode();

							$validator->setUserCc(strtoupper(substr($vat_nr, 0, 2)));
							$validator->setUserNr(substr($vat_nr, 2));
							$validator->setIsCronValidation(true);
							$validator->setAddressId($customer->getDefaultBillingAddress()->getId());
							$validator->setAddressType($customer->getDefaultBillingAddress()->getAddressType());
							$validator->validate();
							$result = $validator->getResult();
							$validated++;

							$new_group_id = Mage::helper('euvatgrouper/customer')->getCustomerGroupForAccount($result->getData(), $validator->getUserCc());
							if($old_group_id != $new_group_id)
							{
								$new_group_name = Mage::getModel('customer/group')->load($new_group_id)->getCode();
								$customer->setGroupId($new_group_id);
								Mage::getSingleton('adminhtml/session')->addNotice(Mage::helper('euvatgrouper')->__('Moved customer '.$customer->getId().' from '.$old_group_name.' to '.$new_group_name));
							}

							$defBilling = Mage::helper('euvatgrouper')->setValidationResultOnAddress($result, $customer->getDefaultBillingAddress());
							$customer->setDefaultBillingAddress($defBilling);

							if(is_object($customer->getDefaultShippingAddress()))
							{
								$defShipping = Mage::helper('euvatgrouper')->setValidationResultOnAddress($result, $customer->getDefaultShippingAddress());
								$customer->setDefaultShippingAddress($defShipping);
							}

							$customer->save();
						}
					}

					Mage::getSingleton('adminhtml/session')->addSuccess(Mage::helper('euvatgrouper')->__('Successfully validated '.$validated.'/'.count($customerIds).' customers.'));

			} catch(Exception $e) {
				Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
				//Mage::throwException($e);
			}
		}

		$this->_redirectReferer();
	}

	/**
	 * Regular admin validation
	 */
	public function validateSingleAddressAction()
	{
		$do_validation = false;
		$customer_vat_id = false;
		$validator = Mage::getSingleton("euvatgrouper/validation_vies");
		$op_mode = $this->getRequest()->getParam('op_mode');
		$validator->setOpMode($op_mode);

		$address_type = $this->getRequest()->getParam('address_type');
		if(!$address_type || $address_type == '') $address_type = 'billing';
		$validator->setAddressType($address_type);

		$address_id = $this->getRequest()->getParam('address_id');
		$validator->setAddressId($address_id);

		if ($this->getRequest()->getParam('vat') != "")
		{
			$customer_vat_id = Mage::helper('euvatgrouper')->cleanCustomerVatId($this->getRequest()->getParam('vat'));

		} elseif ($this->getRequest()->getParam('vat_id') != "") {
			$customer_vat_id = Mage::helper('euvatgrouper')->cleanCustomerVatId($this->getRequest()->getParam('vat_id'));

		} elseif ($this->getRequest()->getParam('taxvat') != "") {
			$customer_vat_id = Mage::helper('euvatgrouper')->cleanCustomerVatId($this->getRequest()->getParam('taxvat'));

		} elseif (is_array($this->getRequest()->getParam('billing'))) {

			$param = $this->getRequest()->getParam('billing');
			$customer_vat_id = Mage::helper('euvatgrouper')->cleanCustomerVatId($param['vat_id']);
		}

		if($customer_vat_id != false) {
			$validator->setUserTaxvat($customer_vat_id);
			$do_validation = true;
		}

		if ($do_validation)
		{
			$validator->setUserCc(strtoupper(substr($validator->getUserTaxvat(), 0, 2)));
			$validator->setUserNr(substr($validator->getUserTaxvat(), 2));

			try {
				$validator->validate();
				$result = $validator->getResult();
				$this->getResponse()->setBody(Mage::helper('core')->jsonEncode($result));
			} catch(SoapFault $e) {
				$result = new StdClass();
				$result->faultstring = strtoupper($e->getMessage());
				$this->getResponse()->setBody(Mage::helper('core')->jsonEncode($result));
			}
		}

	}
}
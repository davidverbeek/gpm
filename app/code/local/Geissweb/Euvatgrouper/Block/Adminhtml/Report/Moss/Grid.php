<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL:
 * http://www.geissweb.de/eula/
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @category    Mage
 * @package     Geissweb_Euvatgrouper
 * @copyright   Copyright (c) 2011 GEISS WeblÃ¶sungen (http://www.geissweb.de)
 * @license     http://www.geissweb.de/eula/ GEISSWEB End User License Agreement
 */

class Geissweb_Euvatgrouper_Block_Adminhtml_Report_Moss_Grid extends Mage_Adminhtml_Block_Widget_Grid
{
	protected $_countTotals = true;

	public function __construct()
	{
		parent::__construct();
		$this->setId('euvatreportGrid');
		$this->setDefaultDir('ASC');
		$this->setSaveParametersInSession(true);
		//$this->setPagerVisibility(false);

		$this->prepareForm();

		$this->setTemplate('euvatgrouper/euvat_report.phtml');
	}

	public function prepareForm()
	{
		$form = new Varien_Data_Form(array(
			'id' => 'test',
			'action' => $this->getUrl('*/adminhtml_report', array('year' => $this->getRequest()->getParam('year'))),
			'method' => 'post'
		));
		$form->setUseContainer(true);

		$form->addField('year', 'select', array(
			'label'     => Mage::helper('euvatgrouper')->__('Year'),
			'name'      => 'year',
			'onchange' => '',
			'values' => Mage::helper('euvatgrouper/admin')->getYearRange(),
		));

		$form->addField('period', 'select', array(
			'label'     => Mage::helper('euvatgrouper')->__('Period'),
			'name'      => 'period',
			'onchange' => '',
			'values' => Mage::helper('euvatgrouper/admin')->getMonthsArray(),
		));

		$post = $this->getRequest()->getPost();
		if($post) {
			$this->setPost($post);
			$form->setValues($post);
		} else {
			$form->setValues(array(
				'year' => date("Y"),
				'period' => 'yy'
			));
		}



		$form->addField('submit', 'submit', array(
			'class'      => 'scalable task submit form-button',
			'value' => Mage::helper('euvatgrouper')->__('Bericht zeigen'),
		));

		$this->setForm($form);
	}

	protected function _prepareCollection()
	{
		$ordersCollection = Mage::getModel('sales/order')->getCollection()
			->addAttributeToSelect('*')
			->addFieldToFilter(array('status', 'status'),
				array(
					array('eq' => 'complete'),
					//array('eq' => 'processing')
				)
			);

		$post = $this->getRequest()->getPost();
		if($post)
		{
			$year = $post['year'];
			$period = $post['period'];

			switch($period) {
				case '01':case '02':case '03':case '04':case '05':case '06':case '07':case '08':case '09':case '10':case '11':case '12':
					$gtEq = array('gteq'=>"$year-$period-01");
					$ltEq = array('lteq'=>"$year-".($period+1)."-01");
					break;
				case '1q':
					$gtEq = array('gteq'=>$year."-01-01");
					$ltEq = array('lteq'=>$year."-04-01");
					break;
				case '2q':
					$gtEq = array('gteq'=>$year."-04-01");
					$ltEq = array('lteq'=>$year."-07-01");
					break;
				case '3q':
					$gtEq = array('gteq'=>$year."-07-01");
					$ltEq = array('lteq'=>$year."-10-01");
					break;
				case '4q':
					$gtEq = array('gteq'=>$year."-10-01");
					$ltEq = array('lteq'=>($year+1)."-01-01");
					break;
				case 'yy':
				default:
				$gtEq = array('gteq'=>$year."-01-01");
				$ltEq = array('lteq'=>$year."-12-31");
					break;
			}

		} else {
			$gtEq = array('gteq'=>date("Y")."-01-01");
			$ltEq = array('lteq'=>date("Y")."-12-31");
		}

/*
		echo "<pre>";
		var_dump($post);
		var_dump($gtEq);
		var_dump($ltEq);
		die();
*/

		$ordersCollection
			->addFieldToFilter('created_at', $gtEq )
			->addFieldToFilter('created_at', $ltEq);


		$basedOn = (Mage::helper('euvatgrouper')->getVatBasedOn() != 'origin') ? Mage::helper('euvatgrouper')->getVatBasedOn() : 'billing';
		$ordersCollection->getSelect()->join(array('order_address' => 'sales_flat_order_address'), 'order_address.entity_id = main_table.'.$basedOn.'_address_id');
		$ordersCollection->getSelect()->join(array('order_tax' => 'sales_order_tax'), 'order_tax.order_id = main_table.entity_id');


		$ordersCollection->addFieldToFilter('country_id', array('in'=>Mage::helper('euvatgrouper')->getEuCountries()));
		$ordersCollection->addFieldToFilter('base_amount', array('gt'=>0));
		$ordersCollection->setOrder('created_at', 'ASC');
		//$ordersCollection->getSelect()->group('country_id');

		$byCountry = array();
		foreach($ordersCollection as $order)
		{

			if(array_key_exists($order->getCountryId(), $byCountry))
			{
				$byCountry[$order->getCountryId()]['tax_amount'] += (float)$order->getTaxAmount();
				$byCountry[$order->getCountryId()]['net_sum'] += (float)$order->getBaseGrandTotal() - (float)$order->getTaxAmount();
				$byCountry[$order->getCountryId()]['gross_sum'] += (float)$order->getBaseGrandTotal();
				$byCountry[$order->getCountryId()]['order_count']++;
				if($byCountry[$order->getCountryId()]['tax_code'] != $order->getCode())
				{
					$byCountry[$order->getCountryId()]['percent'].= " -|- ".$order->getCode()." (".$order->getPercent().")";
				}
			} else {
				$byCountry[$order->getCountryId()]['tax_amount'] = (float)$order->getTaxAmount();
				$byCountry[$order->getCountryId()]['net_sum'] = (float)$order->getBaseGrandTotal() - (float)$order->getTaxAmount();
				$byCountry[$order->getCountryId()]['gross_sum'] = (float)$order->getBaseGrandTotal();
				$byCountry[$order->getCountryId()]['order_count'] = 1;
				$byCountry[$order->getCountryId()]['tax_code'] = $order->getCode();
				$byCountry[$order->getCountryId()]['percent'] = $order->getCode()." (".$order->getPercent().")";
			}
		}

		$dataCollection = new Varien_Data_Collection();
		foreach($byCountry as $country => $data)
		{
			$item = new Varien_Object();
			$item->setData($data);
			$item->setCountry(Mage::app()->getLocale()->getCountryTranslation($country)." ($country)");
			$dataCollection->addItem($item);
		}

/*
echo "<pre>";
var_dump($dataCollection);
die();
*/

		$this->setCollection($dataCollection);
		return parent::_prepareCollection();
	}

	protected function _prepareColumns()
	{
		$this->addColumn('country', array(
			'header' => Mage::helper('euvatgrouper')->__('Country'),
			'align' => 'left',
			'sortable' => false,
			'filter' => false,
			'index' => 'country'
		));

		$this->addColumn('order_count', array(
			'header' => Mage::helper('euvatgrouper')->__('Order Count'),
			'align' => 'right',
			'sortable' => false,
			'filter' => false,
			'index' => 'order_count'
		));

		$this->addColumn('percent', array(
			'header' => Mage::helper('euvatgrouper')->__('Rate (%)'),
			'align' => 'right',
			'sortable' => false,
			'filter' => false,
			'index' => 'percent'
		));

		$this->addColumn('net_sum', array(
			'header' => Mage::helper('euvatgrouper')->__('Net Sum'),
			'align' => 'right',
			'sortable' => false,
			'filter' => false,
			'index' => 'net_sum'
		));

		$this->addColumn('tax_amount', array(
			'header' => Mage::helper('euvatgrouper')->__('Tax Amount'),
			'align' => 'right',
			'sortable' => false,
			'filter' => false,
			'index' => 'tax_amount'
		));

		$this->addColumn('gross_sum', array(
			'header' => Mage::helper('euvatgrouper')->__('Gross Sum'),
			'align' => 'right',
			'sortable' => false,
			'filter' => false,
			'index' => 'gross_sum'
		));

		$this->addExportType('*/*/exportCsv', Mage::helper('euvatgrouper')->__('CSV'));
		$this->addExportType('*/*/exportXml', Mage::helper('euvatgrouper')->__('XML'));

		parent::_prepareColumns();
	}



	public function getTotals()
	{
		$totals = new Varien_Object();
		$fields = array(
			'order_count' => 0,
			'net_sum' => 0,
			'tax_amount' => 0,
			'gross_sum' => 0,

		);

		foreach ($this->getCollection() as $item) {
			foreach($fields as $field => $value){
				$fields[$field] += $item->getData($field);
			}
		}

		$fields['country'] = Mage::helper('euvatgrouper')->__('Totals');
		$totals->setData($fields);
		return $totals;
	}


	public function getRowUrl($row)	{return false;}
}

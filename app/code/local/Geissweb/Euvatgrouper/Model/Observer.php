<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL:
 * http://www.geissweb.de/eula/
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @category    Mage
 * @package     Geissweb_Euvatgrouper
 * @copyright   Copyright (c) 2011 GEISS WeblÃ¶sungen (http://www.geissweb.de)
 * @license     http://www.geissweb.de/eula/ GEISSWEB End User License Agreement
 */

class Geissweb_Euvatgrouper_Model_Observer extends Mage_Checkout_Model_Observer
{
    var $_debug = false;

    public function __construct()
    {
        $this->_debug = Mage::helper('euvatgrouper')->isDebugMode();
    }

	/**
	 * Set default billing and shipping addresses on customer login to quote
	 * @param Varien_Event_Observer $observer
	 */
	public function customerLogin(Varien_Event_Observer $observer)
	{
		if($this->_debug) Mage::log("[EUVAT] EVENT START customerLogin", null, 'euvatenhanced.log');

		/** @var Mage_Customer_Model_Customer $customer */
		$customer = $observer->getEvent()->getCustomer();
		$billingAddress = $customer->getDefaultBillingAddress();
		$shippingAddress = $customer->getDefaultShippingAddress();

		$quote = Mage::getSingleton('checkout/session')->getQuote();
		
		/*Mage::log("[EUVAT] Default Billing Address", null, 'euvatenhanced.log');
        Mage::log(print_r($billingAddress->getData(),true),null,'euvatenhanced.log');
        
        Mage::log("[EUVAT] Default Shipping Address ", null, 'euvatenhanced.log');
        Mage::log(print_r($shippingAddress->getData(),true),null,'euvatenhanced.log');

        Mage::log("[EUVAT] Shipping Adddress before setting up ", null, 'euvatenhanced.log');
        Mage::log(print_r($quote->getAllShippingAddresses(),true),null,'euvatenhanced.log');*/

		
		if($billingAddress instanceof Mage_Customer_Model_Address)
		{
			if($billingAddress->getVatId() != '' && $billingAddress->getVatRequestSuccess() != true) {
				if($this->_debug) Mage::log("[EUVAT] customerLogin: quickValidate: ".$billingAddress->getVatId(), null, 'euvatenhanced.log');
				$validatedAddress = Mage::helper('euvatgrouper')->quickValidate($billingAddress->getVatId(), $billingAddress);
				if(is_object($validatedAddress)) $billingAddress = $validatedAddress;
			}

			$quote->setBillingAddress(Mage::getSingleton('sales/quote_address')->importCustomerAddress($billingAddress));
			if($this->_debug) Mage::log("[EUVAT] customerLogin: quote bill address is now: ".var_export($quote->getBillingAddress()->debug(),true), null, 'euvatenhanced.log');
		}
		if($shippingAddress instanceof Mage_Customer_Model_Address)
		{
			if($shippingAddress->getVatId() != '' && $shippingAddress->getVatRequestSuccess() != true) {
				if($this->_debug) Mage::log("[EUVAT] customerLogin: quickValidate: ".$shippingAddress->getVatId(), null, 'euvatenhanced.log');
				$validatedAddress = Mage::helper('euvatgrouper')->quickValidate($shippingAddress->getVatId(), $shippingAddress);
				if(is_object($validatedAddress)) $shippingAddress = $validatedAddress;
			}
			$quote->setShippingAddress(Mage::getSingleton('sales/quote_address')->importCustomerAddress($shippingAddress));
			if($this->_debug) Mage::log("[EUVAT] customerLogin: quote ship address is now: ".var_export($quote->getShippingAddress()->debug(),true), null, 'euvatenhanced.log');
		}

		$quote->setTotalsCollectedFlag(false)->collectTotals()->save();

		if($this->_debug) Mage::log("[EUVAT] EVENT END customerLogin", null, 'euvatenhanced.log');
	}

	/**
	 * sets the customer group
	 * @var Varien_Event_Observer
	 */
	public function customerSaveBefore(Varien_Event_Observer $observer)
	{
		if(Mage::helper('euvatgrouper')->isModuleActive()) {

			if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: customerSaveBefore ----------", null, 'euvatenhanced.log');
			/** @var $customer Mage_Customer_Model_Customer */
			$customer = $observer->getCustomer();

			if($customer->getGroupId() == null && $customer->getEntityId() > 0) {
				$customerExisting = Mage::getSingleton('customer/customer')->load($customer->getEntityId());
				if($this->_debug) Mage::log("[EUVAT] Loading existing customer group: ".$customerExisting->getGroupId(), null, 'euvatenhanced.log');
				$customer->setGroupId($customerExisting->getGroupId());
			}

			if($this->_debug) Mage::log("[EUVAT] customerSaveBefore Customer Information: ".var_export($customer->debug(),true), null, 'euvatenhanced.log');

			//$taxvatCc = ($customer->getTaxvat() != '') ? strtoupper(substr($customer->getTaxvat(), 0, 2)) : null;
			$billingCc = Mage::helper('euvatgrouper/customer')->getBillingCountry($customer);

			// Just return when admin tries manually to change the customer to another group,
			// group is in excluded list or unable to get customer_cc
			if (Mage::helper('euvatgrouper')->isAdmin()
				|| in_array($customer->getGroupId(), Mage::helper('euvatgrouper')->getExcludedGroups())
				|| $billingCc == false
				|| $customer->getDisableAutoGroupChange() == 1 ) {
				if($this->_debug) Mage::log("[EUVAT] EVENT END: customerSaveBefore (just returned) - ".(string)Mage::helper('euvatgrouper')->isAdmin()."-".in_array($customer->getGroupId(), Mage::helper('euvatgrouper')->getExcludedGroups())."-".$billingCc."-".$customer->getDisableAutoGroupChange()."----", null, 'euvatenhanced.log');
				return;
			}

			try {

				$tempVatValidation = Mage::getSingleton('customer/session')->getData('temp_vat_validation');

				// default groups remove from array
				$customerGroups = explode(',', $customer->getGroupId());
				$customerGroups = array_diff($customerGroups, array(1, 2, 3, 15, 16, 17, 18));
				$customerGroups = implode(',', $customerGroups);

				/**/
				if( Mage::registry('euvat_group_assignment_group') != false ) {
					$customer->setGroupId((int)Mage::registry('euvat_group_assignment_group'));
					Mage::unregister('euvat_group_assignment_group');
				} elseif( is_object($customer->getDefaultBillingAddress()) ) {
					$group_id = Mage::helper('euvatgrouper/customer')->getCustomerGroupForAccount($customer->getDefaultBillingAddress()->toArray());
					if( $this->_debug ) Mage::log("[EUVAT] Customer Group Assignment: Using DefaultBillingAddress: $group_id ($billingCc)", null, 'euvatenhanced.log');
					if( is_int($group_id) )
						$customer->setGroupId($group_id);
				} elseif(is_object($tempVatValidation)) {
						$group_id = Mage::helper('euvatgrouper/customer')->getCustomerGroupForAccount($tempVatValidation->toArray());
						if ($this->_debug) Mage::log("[EUVAT] Customer Group Assignment: using tempVatValidation, Group: $group_id ($billingCc)", null, 'euvatenhanced.log');
						if(is_int($group_id))
								$customer->setGroupId($group_id);

				} elseif( Mage::registry('euvat_checkout_group_id') != false ) {
					$group_id = Mage::registry('euvat_checkout_group_id');
					$customer->setGroupId($group_id);
					if ($this->_debug) Mage::log("[EUVAT] Customer Group Assignment: using checkout group: $group_id ($billingCc)", null, 'euvatenhanced.log');
					Mage::unregister('euvat_checkout_group_id');
				} elseif( !Mage::helper('euvatgrouper')->isEuCountry($billingCc) ) {
					$customer->setGroupId( Mage::helper('euvatgrouper')->getOutsideEuGroupId() );
					if ($this->_debug) Mage::log("[EUVAT] Customer Group Assignment: NON-EU Country: $billingCc", null, 'euvatenhanced.log');
				}

				// Append debture number group if existing have
				if($customerGroups){
					$customer->setGroupId( $customer->getGroupId() . ',' . $customerGroups );
				}
			} catch (Exception $e) {
				Mage::logException($e);
			}
			if($this->_debug) Mage::log("[EUVAT] EVENT END: customerSaveBefore ----------", null, 'euvatenhanced.log');
		}
	}

	/**
	 * Add VAT validation details to new customer address
	 * @param Varien_Event_Observer $observer
	 */
	public function customerAddressSaveBefore(Varien_Event_Observer $observer)
	{
		if($this->_debug) Mage::log("[EUVAT] EVENT START: customerAddressSaveBefore ------", null, 'euvatenhanced.log');
		/** @var Mage_Customer_Model_Address $address */
		$address = $observer->getCustomerAddress();
		$tempValidation = Mage::getSingleton('customer/session')->getData('temp_vat_validation');
		if($this->_debug) Mage::log("[EUVAT] customerAddressSaveBefore address is:".var_export($address->debug(),true)." and tempValidation is:".var_export($tempValidation,true), null, 'euvatenhanced.log');

		if($tempValidation != null && $tempValidation->getVatId() == $address->getVatId()) {
			Mage::helper('euvatgrouper')->setValidationResultOnAddress($tempValidation, $address);
			Mage::getSingleton('customer/session')->unsetData('temp_vat_validation');
		}

        if($address->getEntityId() > 0 && !$address->hasData('vat_request_success'))
        {
            if($this->_debug) Mage::log("[EUVAT]customerAddressSaveBefore no vat_request_success", null, 'euvatenhanced.log');
            $savedAddress = Mage::getSingleton('customer/address')->load($address->getEntityId());

            if($savedAddress->hasData('vat_request_success') && $savedAddress->getVatId() == $address->getVatId())
            {
                $address = Mage::helper('euvatgrouper')->setValidationResultOnAddress($savedAddress,$address);
            }
        }


        if(!$address->getIsCustomerSaveTransaction()
            && $address->getCustomerId() > 0
            && !$address->getIsVatValidationTransaction())
        {
            $customer = Mage::getSingleton('customer/customer')->load($address->getCustomerId());
            if(is_object($customer->getDefaultBillingAddress())
                && $customer->getDefaultBillingAddress()->getEntityId() == $address->getEntityId())
            {
                $newGroupId = Mage::helper('euvatgrouper/customer')->getCustomerGroupForAccount($address->toArray(), $address->getCountry());
                if($newGroupId != $customer->getGroupId()) {
                    if($this->_debug) Mage::log("[EUVAT] customerAddressSaveBefore: Group change needed!", null, 'euvatenhanced.log');
                    Mage::register('euvat_group_assignment_group', $newGroupId);
                    $customer->setGroupId($newGroupId)->save();
                }

            }
        }


		if($this->_debug) Mage::log("[EUVAT] EVENT END: customerAddressSaveBefore --------", null, 'euvatenhanced.log');
	}

    /**
     * Observer for VAT-field "onchange"
     * Update quote and session data
     * @var Varien_Event_Observer
     */
    public function vatCheckAfter(Varien_Event_Observer $observer)
    {
        if(Mage::helper('euvatgrouper')->isModuleActive())
        {
            if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: vatCheckAfter (address_id: ".$observer->getEvent()->getAddressId().")", null, 'euvatenhanced.log');

            try {
                $result = $observer->getEvent()->getResult();
                $addressId = $observer->getEvent()->getAddressId();

                // Save validation information to address (from admin or customer account)
                if(is_object($result))
                {
                    //Register the temporary validation object
                    Mage::register('tempVatValidation', $result);
                    if($this->_debug) Mage::log("[EUVAT] vatCheckAfter Validation result: " . var_export($result, true), null, 'euvatenhanced.log');

                    // Update address data from customer address edit
                    if( $addressId != 0 && !empty($addressId) )
                    {
                        $address = Mage::getModel('customer/address')->load((int)$addressId);
                        if( $address instanceof Mage_Customer_Model_Address ) {
                            if( $this->_debug ) Mage::log("[EUVAT] vatCheckAfter saving Validation result on address", null, 'euvatenhanced.log');
                            $address->setIsVatValidationTransaction(true);
                            $address = Mage::helper('euvatgrouper')->setValidationResultOnAddress($result, $address);
                            $address->save();

                            // Set validation data to session
                            if(!Mage::helper('euvatgrouper')->isAdmin()) {
                                $this->_setVatSessionData($address, $address->getAddressType());
                                Mage::getSingleton('customer/session')->setData('temp_vat_validation', $result);
                            }

                        }

                    } else {
                        // Set validation data to session
                        if(!Mage::helper('euvatgrouper')->isAdmin()) {
                            $this->_setVatSessionData($result, $result->getAddressType());
                            Mage::getSingleton('customer/session')->setData('temp_vat_validation', $result);
                        }
                    }


                    // Update customer
                    if(Mage::getSingleton('customer/session')->isLoggedIn())
                    {
                        $customer = Mage::getSingleton('customer/session')->getCustomer();
                        if($customer->getGroupId() != $result->getGroup()) {
                            if($this->_debug) Mage::log("[EUVAT] Customer group change needed", null, 'euvatenhanced.log');
                            $customer->setGroupId($result->getGroup());
                            $customer->save();
                        }
                    }


                    //Send successmail for all not-domestic valid vat validations from customers
                    if(($result->getVatIsValid() == true))
                    {
                        Mage::dispatchEvent('vat_check_success_email', array(
                            'result' => $result
                        ));
                    }

                }
                if($this->_debug) Mage::log("[EUVAT] EVENT END: vatCheckAfter -----------------", null, 'euvatenhanced.log');

            } catch (Exception $e) {
                Mage::logException($e);
            }
        }

    }

	/**
	 * Set active validation data to customers quote
	 * @param $address
	 * @param $addressType
	 */
	private function _setVatSessionData($address, $addressType)
	{
		if(Mage::helper('euvatgrouper')->isModuleActive() && !Mage::helper('euvatgrouper')->isAdmin())
		{
			if($this->_debug) Mage::log("[EUVAT] Function RUNNING: _setVatSessionData(" . $addressType.") -- Address is instanceof ".get_class($address)." | vat_is_valid:".$address->getVatIsValid(), null, 'euvatenhanced.log');
			if(is_object($address))
			{
				$vatDataUpdate = array(
					'vat_id' 				=> $address->getVatId(),
					'vat_is_valid' 			=> (bool)$address->getVatIsValid(),
					'vat_request_success'	=> (bool)$address->getVatRequestSuccess(),
					'vat_trader_name'		=> $address->getVatTraderName(),
					'vat_trader_address'	=> $address->getVatTraderAddress(),
					'vat_trader_company_type'=> $address->getVatTraderCompanyType(),
					'vat_request_id'		=> $address->getVatRequestId(),
					'vat_request_date'		=> $address->getVatRequestDate(),
				);
				if($this->_debug) Mage::log("[EUVAT] data is ".var_export($vatDataUpdate,true), null, 'euvatenhanced.log');

				/** @var Mage_Sales_Model_Quote $quote */
				$quote = Mage::getSingleton('checkout/session')->getQuote();
				$billAddress = $quote->getBillingAddress();
				$shipAddress = $quote->getShippingAddress();

				if($addressType=='billing') {
					if($this->_debug) Mage::log("[EUVAT] setting billing", null, 'euvatenhanced.log');
					$billAddress = Mage::helper('euvatgrouper')->setValidationResultOnAddress(new Varien_Object($vatDataUpdate), $billAddress);
					$quote->setBillingAddress($billAddress);
					if($shipAddress->getSameAsBilling() || $billAddress->getUseForShipping()){
						if($this->_debug) Mage::log("[EUVAT] AND setting shipping", null, 'euvatenhanced.log');
						$shipAddress = Mage::helper('euvatgrouper')->setValidationResultOnAddress(new Varien_Object($vatDataUpdate), $shipAddress);
						$quote->setShippingAddress($shipAddress);
					}
				} elseif($addressType=='shipping') {
					if($this->_debug) Mage::log("[EUVAT] setting shipping", null, 'euvatenhanced.log');
					$shipAddress = Mage::helper('euvatgrouper')->setValidationResultOnAddress(new Varien_Object($vatDataUpdate), $shipAddress);
					$quote->setShippingAddress($shipAddress);
				}
				$quote->setTotalsCollectedFlag(false)->collectTotals()->save();

			} else {
				if($this->_debug) Mage::log("[EUVAT] No address or Adminvalidation", null, 'euvatenhanced.log');
			}
			if($this->_debug) Mage::log("[EUVAT] Function END: _setVatSessionData", null, 'euvatenhanced.log');
		}

	}


	/**
	 * Make sure no VAT validation fragments persist on the quote address if no VAT number is used
	 * @param Varien_Event_Observer $observer
	 */
	public function salesQuoteAddressCollectTotalsBefore(Varien_Event_Observer $observer)
	{
		if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: salesQuoteAddressCollectTotalsBefore", null, 'euvatenhanced.log');
		$address = $observer->getEvent()->getQuoteAddress();
        $quote = $address->getQuote();

        //if($this->_debug) Mage::log("[EUVAT] salesQuoteAddressCollectTotalsBefore quote is: ".var_export($quote->getData(),true), null, 'euvatenhanced.log');

		if(Mage::helper('euvatgrouper')->isPlainQuote($address) && Mage::getSingleton('customer/session')->isLoggedIn())
		{
			$customer = Mage::getSingleton('customer/session')->getCustomer();

			if($address->getAddressType()=='shipping') {
				$customerDefault = $customer->getDefaultShippingAddress();
			} else {
				$customerDefault = $customer->getDefaultBillingAddress();
			}
			if($customerDefault instanceof Mage_Customer_Model_Address)
			{
				$address = Mage::helper('euvatgrouper')->setValidationResultOnAddress($customerDefault, $address);
				$address->setCountryId($customerDefault->getCountry());
				if($this->_debug) Mage::log("[EUVAT] salesQuoteAddressCollectTotalsBefore isPlainQuote!", null, 'euvatenhanced.log');
			}

		} elseif($address->getVatId()=='') {
			$address = Mage::helper('euvatgrouper')->clearVatInfoFromAddress($address);
		} else {
			$tempValidation = Mage::getSingleton('customer/session')->getData('temp_vat_validation');
			if($this->_debug) Mage::log("[EUVAT] customerAddressSaveBefore address is:".var_export($address->debug(),true)." and tempValidation is:".var_export($tempValidation,true), null, 'euvatenhanced.log');
			if($tempValidation != false && $tempValidation->getVatId() == $address->getVatId()) {
				$address = Mage::helper('euvatgrouper')->setValidationResultOnAddress($tempValidation, $address);
			}
		}
		$observer->getEvent()->setQuoteAddress($address);
		if($this->_debug) Mage::log("[EUVAT] EVENT END: salesQuoteAddressCollectTotalsBefore", null, 'euvatenhanced.log');
	}

	/**
	 * Observer for tax calculation
	 * @var Varien_Event_Observer
	 */
	public function taxRateDataFetch(Varien_Event_Observer $observer)
	{
		if(Mage::helper('euvatgrouper')->isModuleActive() && !Mage::helper('euvatgrouper')->isAdmin())
		{
			$vatBasedOn = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_BASED_ON, Mage::app()->getStore()->getId());
			if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: taxRateDataFetch -- Tax on: $vatBasedOn ", null, 'euvatenhanced.log');
			if($vatBasedOn=='default' || $vatBasedOn=='origin') {
				if($this->_debug) Mage::log("[EUVAT] Just returned", null, 'euvatenhanced.log');
				return;
			}

			// Allow exclusive, not EU VAT validation related customer groups to have their special rates applied
			//if( in_array($customer->getGroupId(), Mage::helper('euvatgrouper')->getExcludedTaxGroups()) ) {
			//	if($this->_debug) Mage::log("[EUVAT] Is excluded tax group", null, 'euvatenhanced.log');
			//	return;
			//}

			/** @var $request Varien_Object */
			$request = $observer->getEvent()->getRequest();
            if($this->_debug) Mage::log("[EUVAT] Request is: ".var_export($request->debug(),true), null, 'euvatenhanced.log');

			try {
				if(!Mage::getSingleton('checkout/session')->hasQuote()) return;

                // Collect and evaluate the data
                $customer = Mage::getSingleton('customer/session')->getCustomer();
				$shopCc = Mage::helper('euvatgrouper')->getShopVatCc(); // Shop Country Code (Shipping from)
				$billingAddress = Mage::getSingleton('checkout/session')->getQuote()->getBillingAddress();
				$shippingAddress = Mage::getSingleton('checkout/session')->getQuote()->getShippingAddress();
                $basedOnAddress = Mage::helper('euvatgrouper')->getVatBasedOnAddress($billingAddress, $shippingAddress);

                // Use existing customer default addresses if quote has currently no address set and customer is logged in
                if(Mage::helper('euvatgrouper')->isPlainQuote($basedOnAddress) && Mage::helper('euvatgrouper')->isPlainAddress($basedOnAddress))
                {
                    if(Mage::getSingleton('customer/session')->isLoggedIn())
                    {
                        $billingAddressId = (int)Mage::getSingleton('customer/session')->getCustomer()->getDefaultBilling();
                        if($billingAddressId > 0) {
                            $billingAddress = Mage::getModel('customer/address')->load($billingAddressId);
                        }
                        $shippingAddressId = (int)Mage::getSingleton('customer/session')->getCustomer()->getDefaultShipping();
                        if($shippingAddressId > 0) {
                            $shippingAddress = Mage::getModel('customer/address')->load($shippingAddressId);
                        }
                        $basedOnAddress = Mage::helper('euvatgrouper')->getVatBasedOnAddress($billingAddress, $shippingAddress);
                    }
                }
				if($this->_debug) Mage::log("[EUVAT] basedOn address: ".var_export($basedOnAddress->debug(),true), null, 'euvatenhanced.log');

				if(!is_null($basedOnAddress->getCountryId())) {
					$basedOnCc = $basedOnAddress->getCountryId();
				} else {
					if($basedOnAddress->getAddressType()=='shipping') {
						$basedOnCc = Mage::helper('euvatgrouper/customer')->getShippingCountry($customer);
					} else {
						$basedOnCc = Mage::helper('euvatgrouper/customer')->getBillingCountry($customer);
					}
				}
				$customerVatIdCc = (!is_null($basedOnAddress->getVatId())) ? strtoupper(substr($basedOnAddress->getVatId(), 0, 2)) : $basedOnCc;
				if($this->_debug) Mage::log('[EUVAT] taxCalc basedOnCC is: '.$basedOnCc." | customerVatIdCc is: ".$customerVatIdCc, null, 'euvatenhanced.log');

				// Dirty fix for Greece country prefix
				if( $customerVatIdCc == "EL" ) $customerVatIdCc = "GR";

				// We only need to modify the rate request for the "based on" country
				if($request->getCountryId() == $basedOnCc)
				{
					$taxExemptClassId = Mage::helper('euvatgrouper')->getTaxExemptClassId();
					$taxIncludingClassId = Mage::helper('euvatgrouper')->getTaxIncludingClassId();
                    $taxIncludingClassIdBusiness = Mage::helper('euvatgrouper')->getTaxIncludingClassIdBusiness();

					// Prevent using a (billing) VAT-ID not matching the billing country
					$preCheck = ($basedOnCc != '' && $customerVatIdCc != $basedOnCc) ? true : false;

					if( $basedOnAddress->getVatId() != ''
						&& ($basedOnAddress->getVatIsValid() == true)
						&& ($basedOnCc != '' && $shopCc != $basedOnCc)
						&& Mage::helper('euvatgrouper')->isEuCountry($basedOnCc) )
					{
                        //Customer has valid VAT-ID and is not domestic
						if(!$preCheck) {
							$request->setCustomerClassId($taxExemptClassId);
							if($this->_debug) Mage::log("[EUVAT] Valid VAT exempt - $vatBasedOn country: $basedOnCc - vatIsValid: ".$basedOnAddress->getVatIsValid()." ClassID: $taxExemptClassId", null, 'euvatenhanced.log');
						} else {
							$request->setCustomerClassId($taxIncludingClassId);
							if($this->_debug) Mage::log("[EUVAT] Prevention ($customerVatIdCc) $vatBasedOn country: $basedOnCc - vatIsValid: ".$basedOnAddress->getVatIsValid()." ClassID: $taxIncludingClassId", null, 'euvatenhanced.log');
						}

                    //Customer has valid VAT-ID and is domestic
					} elseif( $basedOnAddress->getVatId() != ''
						&& ($basedOnAddress->getVatIsValid() == true)
						&& ($basedOnCc != '' && $shopCc == $basedOnCc) )
					{
						$request->setCustomerClassId($taxIncludingClassIdBusiness);
						if($this->_debug) Mage::log("[EUVAT] Same $vatBasedOn and shop country - $vatBasedOn country: $basedOnCc - vatIsValid: ".$basedOnAddress->getVatIsValid()." ClassID: $taxIncludingClassId", null, 'euvatenhanced.log');

                    //Customer from outside EU
					} elseif ($basedOnCc != '' && !Mage::helper('euvatgrouper')->isEuCountry($basedOnCc)) {
						$request->setCustomerClassId($taxExemptClassId);
						if($this->_debug) Mage::log("[EUVAT] Out of EU - $vatBasedOn country: $basedOnCc - vatIsValid: ".$basedOnAddress->getVatIsValid()." ClassID: $taxExemptClassId", null, 'euvatenhanced.log');

                    //Customer is Enduser
					} else {
						if($this->_debug) Mage::log("[EUVAT] Enduser/Default (".$customer->getTaxClassId()."|".$request->getCustomerClassId().") - $vatBasedOn country: $basedOnCc - vatIsValid: ".$basedOnAddress->getVatIsValid()." ClassID: $taxIncludingClassId", null, 'euvatenhanced.log');
						$request->setCustomerClassId($taxIncludingClassId);
					}
				}

			} catch (Exception $e) {
				Mage::logException($e);
			}

			if($this->_debug) Mage::log("[EUVAT] EVENT END: taxRateDataFetch", null, 'euvatenhanced.log');
		}

	}


    /**
     * Observer for sending validation email to shop owner
     * @var Varien_Event_Observer
     */
    public function sendSuccessMail(Varien_Event_Observer $observer)
    {
		if(Mage::helper('euvatgrouper')->isModuleActive() && !Mage::helper('euvatgrouper')->isAdmin())
		{
			if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: send_success_mail -- SMTP: ".Mage::getStoreConfigFlag('system/smtp/disable'), null, 'euvatenhanced.log');

			if(Mage::helper('euvatgrouper')->doSendValidationMail())
			{
				$customer = Mage::getSingleton('customer/session')->getCustomer();
				$results = $observer->getEvent()->getResult()->getData();
				foreach ($results as $id => $res) {
					$customer->setData("vies_" . $id, $res);
				}

				$sender = array('name' => Mage::getStoreConfig('trans_email/ident_' . Mage::helper('euvatgrouper')->getMailSender() . '/name'),
								'email' => Mage::getStoreConfig('trans_email/ident_' . Mage::helper('euvatgrouper')->getMailSender() . '/email'));
				$vars = array('customer' => $customer);

				$translate = Mage::getSingleton('core/translate');
				$template = Mage::getModel('core/email_template');
				$template->sendTransactional(
					Mage::helper('euvatgrouper')->getMailTemplate(),
					$sender,
					Mage::helper('euvatgrouper')->getMailRecipient(),
					null, //Recipient Name
					$vars,
					Mage::app()->getStore()->getId()
				);
				$translate->setTranslateInline(true);
				if($this->_debug) Mage::log("[EUVAT] Validation email sent.", null, 'euvatenhanced.log');
			} else {
				if($this->_debug) Mage::log("[EUVAT] Disabled sending validation email.", null, 'euvatenhanced.log');
			}

			if($this->_debug) Mage::log("[EUVAT] EVENT END: send_success_mail -----", null, 'euvatenhanced.log');
		}

    }

	/**
     * Sets the customer group on order object (can be different as group on customer account)
     * @var Varien_Event_Observer
     */
    public function salesConvertQuoteToOrder(Varien_Event_Observer $observer)
    {
		if(Mage::helper('euvatgrouper')->isModuleActive() && !Mage::helper('euvatgrouper')->isAdmin())
		{
			if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: salesConvertQuoteToOrder--------------------", null, 'euvatenhanced.log');
			if (Mage::helper('euvatgrouper')->isAdmin() || $observer->getEvent()->getQuote()->getIsSuperMode()) return;

			// Collect validation data
			$billingAddress = $observer->getEvent()->getQuote()->getBillingAddress();
			$shippingAddress = $observer->getEvent()->getQuote()->getShippingAddress();
			$basedOnAddress = Mage::helper('euvatgrouper')->getVatBasedOnAddress($billingAddress, $shippingAddress);
			if($this->_debug) Mage::log("[EUVAT] Using basedOnAddress: ".var_export($basedOnAddress->debug(),true), null, 'euvatenhanced.log');

            // Takeover the VAT number of the address to the customers account
            if(Mage::helper('euvatgrouper')->getIsTakeoverVatToAccount()
                && Mage::getSingleton('customer/session')->isLoggedIn())
            {
                $vat_id = Mage::helper('euvatgrouper')->cleanCustomerVatId($basedOnAddress->getVatId());
                if($vat_id != '') {
                    if($this->_debug) Mage::log("[EUVAT] Setting account based VAT field: ".$vat_id, null, 'euvatenhanced.log');
                    Mage::getSingleton('customer/session')->getCustomer()->setTaxvat($vat_id)->save();
                }
            }

			// Set the customer group for the specific order according to VAT status
			$orderGroupId = Mage::helper('euvatgrouper/customer')->getCustomerGroupForOrder($basedOnAddress);
			if(is_int($orderGroupId)) {
				$groupName = Mage::getModel('customer/group')->load($orderGroupId)->getCustomerGroupCode();
				if($this->_debug) Mage::log("[EUVAT] Setting customer group id on order: ".$orderGroupId." ($groupName)", null, 'euvatenhanced.log');
				$observer->getEvent()->getOrder()->setCustomerGroupId($orderGroupId);
                if(!Mage::registry('euvat_checkout_group_id'))
				    Mage::register('euvat_checkout_group_id', $orderGroupId);
			}

			if($this->_debug) Mage::log("[EUVAT] EVENT END: salesConvertQuoteToOrder--------------------", null, 'euvatenhanced.log');
		}
	}

    /**
     * Checks if valid VAT number is required to checkout
     * @param Varien_Event_Observer $observer
     *
     * @throws Mage_Core_Exception
     */
	public function salesOrderPlaceBefore(Varien_Event_Observer $observer)
	{
		if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: sales_order_place_before -------------------", null, 'euvatenhanced.log');

        $order = $observer->getEvent()->getOrder();
        $billingAddress = $order->getBillingAddress();
        $shippingAddress = $order->getShippingAddress();
        $basedOnAddress = Mage::helper('euvatgrouper')->getVatBasedOnAddress($billingAddress, $shippingAddress);

        //Check if valid VAT number is required to checkout
        if(Mage::helper('euvatgrouper')->getIsVatNumberRequired() && $basedOnAddress->getVatIsValid() != true)
        {
            if($this->_debug) Mage::log("[EUVAT] Valid VAT number is required to checkout, but not provided", null, 'euvatenhanced.log');
            Mage::throwException(Mage::helper('euvatgrouper')->__('Your VAT Number is invalid. Please provide a valid VAT Number to place your order.'));
        }

        if($this->_debug) Mage::log("[EUVAT] EVENT END: sales_order_place_before -------------------", null, 'euvatenhanced.log');
	}


	/**
	 * Saves the validation details to the order comments
	 * @param Varien_Event_Observer $observer
	 */
	public function salesOrderPlaceAfter(Varien_Event_Observer $observer)
	{
		if(Mage::helper('euvatgrouper')->isModuleActive())
		{
			if($this->_debug) Mage::log("[EUVAT] EVENT RUNNING: sales_order_place_after--------------------", null, 'euvatenhanced.log');

			try {
				/** @var $orderInstance Mage_Sales_Model_Order */
				$orderInstance = $observer->getOrder();
				/** @var $orderAddress Mage_Sales_Model_Order_Address */
				$VatBasedOn = Mage::getStoreConfig(Mage_Tax_Model_Config::CONFIG_XML_PATH_BASED_ON, Mage::app()->getStore()->getId());
				$orderAddress = null;
				switch ($VatBasedOn)
				{
					case 'shipping':
						$orderAddress = $orderInstance->getShippingAddress();
						break;
					default:
						$orderAddress = $orderInstance->getBillingAddress();
				}
				if(!($orderAddress instanceof Mage_Sales_Model_Order_Address)) {
					return;
				}
				if($this->_debug) Mage::log("[EUVAT] Tax address is: ".var_export($orderAddress->debug(),true), null, 'euvatenhanced.log');

				$vatId = $orderAddress->getVatId();
				$vatTraderName = $orderAddress->getVatTraderName();
				$vatTraderAddress = $orderAddress->getVatTraderAddress();
				$vatIsValid = $orderAddress->getVatIsValid();
				$vatReqSuccess = $orderAddress->getVatRequestSuccess();

				$comment = '';
				if(!empty($vatId))
				{
					$comment .= Mage::helper('euvatgrouper')->__('VAT number').": ".$vatId."<br/>";

					if(!empty($vatTraderName)) {
						$comment .= Mage::helper('euvatgrouper')->__('VAT Trader Name').": ".$vatTraderName."<br/>";
					}
					if(!empty($vatTraderAddress)) {
						$comment .= Mage::helper('euvatgrouper')->__('VAT Trader Address').": ".$vatTraderAddress."<br/>";
					}
					$comment .= Mage::helper('euvatgrouper')->__('VAT Number is valid').": ";
					$comment .= ($vatIsValid) ? Mage::helper('euvatgrouper')->__('Valid') : Mage::helper('euvatgrouper')->__('Invalid');
					$comment .= "<br/>";
					$comment .= Mage::helper('euvatgrouper')->__('VAT Request success').": ";
					$comment .= ($vatReqSuccess) ? Mage::helper('euvatgrouper')->__('Yes') : Mage::helper('euvatgrouper')->__('No');
					$comment .= "<br/>";
				}

				if($comment != '')
					$orderInstance->addStatusHistoryComment($comment, false);

			} catch(Exception $e) {
				Mage::logException($e);
			}

			if($this->_debug) Mage::log("[EUVAT] EVENT END: sales_order_place_after--------------------", null, 'euvatenhanced.log');
		}

	}

	/**
	 * Adds massactions to customer grid
	 *
	 * @param Varien_Event_Observer $observer
	 */
	public function adminhtmlBlockHtmlBefore(Varien_Event_Observer $observer)
	{
		$block = $observer->getEvent()->getBlock();
		if ($block instanceof Mage_Adminhtml_Block_Customer_Grid || $block instanceof Company_Adminhtml_Block_Customer_Grid)
		{
			$block->getMassactionBlock()->addItem('validate_accountbased', array(
				'label' => Mage::helper('euvatgrouper')->__('Migrate account based VAT-ID'),
				'url' => $block->getUrl('euvatgrouper/adminhtml_euvat/validateAccount'),
			));
		}
	}

	/**
	 * FixFunction to avoid doubling the quote totals after
	 * admin assigns a customer to a new group
	 * @var Varien_Event_Observer
	 */
	public function adminhtmlCustomerSaveAfter(Varien_Event_Observer $observer)
	{
		if(Mage::helper('euvatgrouper')->isModuleActive()) {
			$customer = $observer->getEvent()->getCustomer();
			$customer_quote = Mage::getModel('sales/quote')->getCollection()
				->addFieldToFilter('customer_id', array('eq'=>$customer->getId()))
				->addOrder('updated_at', 'desc');
			if($customer_quote->getSize() > 0) {
				foreach($customer_quote as $quote) {

                    Mage::log('quote Id:'.$quote->getId().' Customer Email:'.$customer->getEmail().'',null,'deleted_addresses_customer_quote.log');
					$quote->removeAllAddresses()->setTotalsCollectedFlag(false)->collectTotals()->save();
				}
			}
		}
	}

	/**
	 * Observer to check for the latest version of EU VAT Enhanced and support informations
	 * @var Varien_Event_Observer
	 */
	public function geissweb_check_for_updates(Varien_Event_Observer $observer)
	{
		$feed = Mage::getSingleton("euvatgrouper/feed");
		$feed->checkUpdate();
	}

}
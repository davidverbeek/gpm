<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL:
 * http://www.geissweb.de/eula/
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @category    Mage
 * @package     Geissweb_Euvatgrouper
 * @copyright   Copyright (c) 2011 GEISS WeblÃ¶sungen (http://www.geissweb.de)
 * @license     http://www.geissweb.de/eula/ GEISSWEB End User License Agreement
 */

class Geissweb_Euvatgrouper_Model_Tax_Config extends Geissweb_Euvatgrouper_Model_Tax_Rewrite
{
	var $_debug = false;

    //const XML_PATH_DISPLAY_SINGLE_PRICE_WHEN_BOTH_AND_VAT_EXEMPT_AT_CART = 'euvatgrouper/integration/price_cart';
    //const XML_PATH_DISPLAY_SINGLE_PRICE_WHEN_BOTH_AND_VAT_EXEMPT_AT_PRODUCTPAGE = 'euvatgrouper/integration/price_product';

	public function __construct()
	{
		$this->_debug = Mage::helper('euvatgrouper')->isDebugMode();
	}

	/**
	 * Return the config value for self::CONFIG_XML_PATH_CROSS_BORDER_TRADE_ENABLED
	 * IF we have Magento >= 1.9.x
	 *
	 * @param int|null $store
	 * @return int
	 */
	public function crossBorderTradeEnabled($store = null)
	{
		if (version_compare(Mage::getVersion(), '1.9', '>='))
		{
			$cbtEnabled = $this->_getStoreConfig(self::CONFIG_XML_PATH_CROSS_BORDER_TRADE_ENABLED, $store);
			if($this->_debug) Mage::log('[EUVAT] crossBorderTradeEnabled: ' . $cbtEnabled, null, 'euvatenhanced.log');
			if($cbtEnabled && !Mage::helper('euvatgrouper')->isAdmin())
			{
				// Get basedOn country
				$billingAddress = Mage::getSingleton('checkout/session')->getQuote()->getBillingAddress();
				$shippingAddress = Mage::getSingleton('checkout/session')->getQuote()->getShippingAddress();
				$basedOnAddress = Mage::helper('euvatgrouper')->getVatBasedOnAddress($billingAddress, $shippingAddress);
				$billingCountryId = $basedOnAddress ? $basedOnAddress->getCountryId() : null;
				if(empty($billingCountryId)) {
					$customer = Mage::getSingleton('customer/session')->getCustomer();
					$billingCountryId = Mage::helper('euvatgrouper/customer')->getBillingCountry($customer);
				}

				if( !Mage::helper('euvatgrouper')->isEuCountry($billingCountryId) )
				{
					if($this->_debug) Mage::log('[EUVAT] crossBorderTradeEnabled exception: NON-EU', null, 'euvatenhanced.log');
					if(Mage::helper('euvatgrouper')->getDisableCbtForOutOfEurope())
						return false;

				} elseif( $basedOnAddress && $basedOnAddress->getVatIsValid() ) {
					if( $this->_debug ) Mage::log('[EUVAT] crossBorderTradeEnabled exception: valid VAT Number', null, 'euvatenhanced.log');
					if(Mage::helper('euvatgrouper')->getDisableCbtForEuBusiness())
						return false;
				}
			}
			return $cbtEnabled;
		} else {
			if($this->_debug) Mage::log('[EUVAT] crossBorderTrade is disabled by Mage version: ' . Mage::getVersion(), null, 'euvatenhanced.log');
		}

		return false;
	}

    /**
     * Get product price display type
     *  1 - Excluding tax
     *  2 - Including tax
     *  3 - Both
     *
     * @param   mixed $store
     * @return  int

    public function getPriceDisplayType($store = null)
    {
        $eval = (int)$this->_getStoreConfig(self::CONFIG_XML_PATH_PRICE_DISPLAY_TYPE, $store);

        if($eval === 3 && $this->_getStoreConfig(self::XML_PATH_DISPLAY_SINGLE_PRICE_WHEN_BOTH_AND_VAT_EXEMPT_AT_PRODUCTPAGE, $store) == 1)
        {
            $taxClass = Mage::helper('euvatgrouper')->getTaxClassIdForGroup(Mage::helper('customer')->getCurrentCustomer()->getGroupId());
            if($taxClass == $this->_getStoreConfig('euvatgrouper/vat_settings/tax_class_excluding', $store)) {
                return 2;
            }
        }

        return $eval;
    }
     */

    /**
     * Check if display cart prices included and excluded tax
     *
     * @param mixed $store
     * @return bool

    public function displayCartPricesBoth($store = null)
    {
        $eval = $this->_getStoreConfig(self::XML_PATH_DISPLAY_CART_PRICE, $store) == self::DISPLAY_TYPE_BOTH;
        if($eval && $this->_getStoreConfig(self::XML_PATH_DISPLAY_SINGLE_PRICE_WHEN_BOTH_AND_VAT_EXEMPT_AT_CART, $store) == 1)
        {
            $taxClass = Mage::helper('euvatgrouper')->getTaxClassIdForGroup(Mage::helper('customer')->getCurrentCustomer()->getGroupId());
            if($taxClass == $this->_getStoreConfig('euvatgrouper/vat_settings/tax_class_excluding', $store))
            {
                if(!Mage::registry('euvat_force_single_price_display')) {
                    Mage::register('euvat_force_single_price_display', true);
                }
                return false;
            }
        }
        return $eval;
    }
     */

    /**
     * Check if display cart prices included tax
     *
     * @param mixed $store
     * @return bool

    public function displayCartPricesInclTax($store = null)
    {
        if(Mage::registry('euvat_force_single_price_display')) {
            return true;
        }
        return $this->_getStoreConfig(self::XML_PATH_DISPLAY_CART_PRICE, $store) == self::DISPLAY_TYPE_INCLUDING_TAX;
    }
    */
}
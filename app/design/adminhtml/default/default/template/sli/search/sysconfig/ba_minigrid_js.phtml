<?php

/**
 * Copyright (c) 2015 S.L.I. Systems, Inc. (www.sli-systems.com) - All Rights
 * Reserved
 * This file is part of Learning Search Connect.
 * Learning Search Connect is distributed under a limited and restricted
 * license - please visit www.sli-systems.com/LSC for full license details.
 *
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO
 * EVENT WILL SLI BE LIABLE TO YOU OR ANY OTHER PARTY FOR ANY GENERAL, DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL LOSS OR DAMAGES OF ANY
 * CHARACTER ARISING OUT OF THE USE OF THE CODE AND/OR THE LICENSE INCLUDING
 * BUT NOT LIMITED TO PERSONAL INJURY, LOSS OF DATA, LOSS OF PROFITS, LOSS OF
 * ASSIGNMENTS, DATA OR OUTPUT FROM THE SERVICE BEING RENDERED INACCURATE,
 * FAILURE OF CODE, SERVER DOWN TIME, DAMAGES FOR LOSS OF GOODWILL, BUSINESS
 * INTERRUPTION, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES
 * OR LOSSES OF WHATEVER NATURE, EVEN IF SLI HAS BEEN INFORMED OF THE
 * POSSIBILITY OF SUCH DAMAGES.
 */

/**
 * Minigrid form field js
 *
 * @package    SLI
 * @subpackage Search
 */
?>
<script type="text/javascript">
    function checkWhitespaceInputs(elementId) {
        function hasWhiteSpace(v) {
            return /\s/g.test(v);
        }

        var inputBox = document.getElementById(elementId);
        if (hasWhiteSpace(inputBox.value)) {
            //made red border
            inputBox.style.border = "1px solid red";

            //add some text to the bottom
            var warning = document.createElement("div");
            warning.addClassName("validation-advice");
            warning.innerText = "Please be aware that whitespace in this field can cause issues";
            inputBox.parentNode.insertBefore(warning, inputBox.nextSibling);
        }
    }

    function baMiniGrid() {
        return {
            /**
             * @param tbody Body tag of grid table to insert rows into
             * @param addRowButton Button that adds rows to grid
             * @param rowName Unique name to give the grid rows. Used in name attribute
             * @param collectionData Object that has info on all prexisting grid rows
             * @param rowData Object containing the schema of the columns in each row
             */
            init: function (tbody, addRowButton, rowName, collectionData, rowData) {
                this.tbody = tbody;
                this.addRowButton = addRowButton;
                this.collectionData = collectionData;
                this.rowData = rowData;
                this.rowName = rowName;

                this.initRows();
                this.observeAddRowButton();
                this.initAttributeValidation();
            },
            observeAddRowButton: function () {
                this.addRowButton.observe('click', function (ev) {
                    ev.stop();
                    this.addRow();
                }.bind(this));
            },
            getNewRowId: function () {
                if (typeof this.rowId == "undefined") {
                    this.rowId = 0;
                }
                return this.tbody.id + "-row-id-" + this.rowId++;
            },
            initRows: function () {
                if (!this.collectionData.length || this.collectionData.length < 1) {
                    return;
                }
                this.collectionData.each(function (rowValues) {
                    var row = this.getNewRow(rowValues);
                    this.addRow(row);
                }.bind(this));
            },
            getNewRow: function (rowValues) {
                var rowId = this.getNewRowId();
                var rowName = this.rowName;

                var tr = new Element('tr', {id: rowId});
                var td, input;
                for (var field in this.rowData) {
                    td = new Element('td');
                    input = this.getInputTag(field, rowName, rowId);
                    if (rowValues && typeof rowValues[field] != 'undefined') {
                        try {
                            input.value = rowValues[field];
                            delete rowValues[field];
                        }
                        catch (e) {
                            if (input.type == "file") {
                                var bgStyle = "background: url('<?php echo Mage::getDesign()->getSkinUrl('images/success_msg_icon.gif') ?>') no-repeat 0 0;";
                                var fileUploaded = new Element('div', {
                                    style: "float:left; width:16px; height:16px; " + bgStyle
                                });
                                var uploaded = new Element('p', {
                                    style: "float:left; margin:0 0 0 5px"
                                }).update("File Uploaded.");
                                Element.insert(td, {bottom: fileUploaded});
                                Element.insert(td, {bottom: uploaded});
                                td.setAttribute("title", "File: " + rowValues[field]);
                            }
                        }
                    }

                    Element.insert(td, {bottom: input});
                    Element.insert(tr, {bottom: td});
                }

                if (rowValues && typeof rowValues != 'undefined') {
                    for (var field in rowValues) {
                        Element.insert(tr, {
                            top: new Element('input', {
                                name: this.rowName + "[" + rowId + "][" + field + "]",
                                type: "hidden",
                                value: rowValues[field]
                            })
                        })
                    }
                }

                var button = new Element('button', {
                    type: 'button',
                    style: 'width:50px;',
                    title: 'Delete'
                }).update("<span>Delete</span>");
                button.className = "scalable delete icon-btn";
                button.observe('click', function (ev) {
                    ev.stop();
                    this.removeRow(rowId);
                }.bind(this));

                var buttonTd = new Element('td');
                Element.insert(buttonTd, {bottom: button});
                Element.insert(tr, {bottom: buttonTd});
                return tr;
            },
            getInputTag: function (field, rowName, rowId) {
                var input;
                if (this.rowData[field]['type'] == 'textarea' || this.rowData[field]['type'] == "select") {
                    input = new Element(this.rowData[field]['type'], {
                        style: "width:98%;",
                        name: rowName + "[" + rowId + "][" + field + "]"
                    });
                    input.addClassName("minigrid-field");
                    input.addClassName("minigrid-field-" + field);
                    input.addClassName("validate-minigrid-attribute");

                    if (typeof this.rowData[field]['options'] != 'undefined') {
                        var options = this.rowData[field]['options'];
                        if (Object.isArray(options)) {
                            options.each(function (value, opt) {
                                var option = new Element('option', {value: opt}).update(value);
                                Element.insert(input, {bottom: option});
                            }.bind(this));
                        }
                        else {
                            for (var opt in options) {
                                var option = new Element('option', {value: opt}).update(options[opt]);
                                Element.insert(input, {bottom: option});
                            }
                        }
                    }
                }
                else {
                    input = new Element('input', {
                        style: "width:" + this.rowData[field]['width'],
                        type: this.rowData[field]['type'],
                        name: rowName + "[" + rowId + "][" + field + "]"
                    });
                    input.addClassName("minigrid-field");
                    input.addClassName("minigrid-field-" + field);
                }
                return input;
            },
            addRow: function (row) {
                row = row || this.getNewRow();
                if (typeof this.allRemoved != 'undefined' && this.allRemoved) {
                    this.allRemoved.remove();
                    delete this.allRemoved;
                }
                Element.insert(this.tbody, {bottom: row});
            },
            removeRow: function (rowId) {
                var row = $(rowId);
                if (typeof row != "undefined" && row) {
                    row.remove();
                    if (this.tbody.children.length == 0) {
                        this.allRemoved = new Element('input', {type: 'hidden', name: this.rowName, value: ''});
                        Element.insert(this.tbody, {bottom: this.allRemoved});
                    }
                }
                return 1;
            },
            initAttributeValidation: function () {
                Validation.add('validate-minigrid-attributes', 'Please remove duplicate attributes.', function (v) {
                    var selectedAttributes = document.getElementsByClassName("validate-minigrid-attribute");

                    var hasDuplicates = false;
                    for (var i = 0; i < selectedAttributes.length; i++) {
                        var occurrences = 1;
                        var icurrent = selectedAttributes.item(i).value;
                        for (var j = i + 1; j < selectedAttributes.length; j++) {
                            var jcurrent = selectedAttributes.item(j).value;
                            if (icurrent == jcurrent) {
                                occurrences++;
                                if (occurrences > 1) {
                                    selectedAttributes.item(i).addClassName('validation-failed');
                                    selectedAttributes.item(j).addClassName('validation-failed');
                                }
                            }
                        }
                        if (occurrences > 1) hasDuplicates = true;
                    }
                    if (hasDuplicates == true) return false;
                    else return true;
                });
            }
        }
    }
</script>
